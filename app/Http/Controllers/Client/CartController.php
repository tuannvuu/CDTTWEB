<?php

namespace App\Http\Controllers\Client;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;
use App\Models\Product;
use App\Models\Order;
use App\Models\OrderItem;

class CartController extends Controller
{
    // üõí Hi·ªÉn th·ªã gi·ªè h√†ng
    public function show()
    {
        $cart = session()->get('cart', []);

        $total = 0;
        $totalQuantity = 0;

        foreach ($cart as $item) {
            $total += $item['price'] * $item['quantity'];
            $totalQuantity += $item['quantity'];
        }

        return view('client.cart.cartshow', compact('cart', 'total', 'totalQuantity'));
    }


    // ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    // ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (ƒê√É S·ª¨A ƒê·ªÇ L·∫§Y S·ªê L∆Ø·ª¢NG)
    public function add(Request $req) // Gi·ªØ nguy√™n Request $req
    {
        $auth = auth();
        if (!$auth->check()) {
            return redirect()->route('login')->with('error', 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c');
        }

        $id = $req->route('id'); // L·∫•y id s·∫£n ph·∫©m t·ª´ route
        $product = Product::findOrFail($id);

        // üëá L·∫•y s·ªë l∆∞·ª£ng t·ª´ form g·ª≠i l√™n (name="quantity"), m·∫∑c ƒë·ªãnh l√† 1 n·∫øu kh√¥ng c√≥
        $requestedQuantity = (int) $req->input('quantity', 1);
        // ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng kh√¥ng √¢m
        if ($requestedQuantity <= 0) {
            $requestedQuantity = 1;
        }

        $cart = Session::get('cart', []);

        if (isset($cart[$product->id])) {
            // ‚úÖ ƒê√öNG: C·ªông th√™m s·ªë l∆∞·ª£ng y√™u c·∫ßu
            $cart[$product->id]['quantity'] += $requestedQuantity;
        } else {
            // ‚úÖ ƒê√öNG: Th√™m m·ªõi v·ªõi s·ªë l∆∞·ª£ng y√™u c·∫ßu
            $cart[$product->id] = [
                'productid' => $product->id,
                'proname'   => $product->proname,
                'quantity'  => $requestedQuantity, // <-- D√πng s·ªë l∆∞·ª£ng y√™u c·∫ßu
                'price'     => $product->price,
                'fileName'  => $product->fileName ? $product->fileName : 'no-image.jpg',
            ];
        }

        Session::put('cart', $cart);
        return redirect()->back()->with('mess', 'ƒê√£ th√™m ' . $requestedQuantity . ' s·∫£n ph·∫©m v√†o gi·ªè h√†ng'); // Th√™m th√¥ng b√°o s·ªë l∆∞·ª£ng
    }
    // ‚ùå Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    public function del($id)
    {
        $cart = Session::get('cart', []);

        if (isset($cart[$id])) {
            unset($cart[$id]);
            Session::put('cart', $cart);
        }

        return redirect()->back()->with('mess', 'ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng');
    }

    // üßæ Trang thanh to√°n (checkout)
    // üßæ Trang thanh to√°n (checkout)
    public function checkout()
    {
        // ‚úÖ L·∫•y gi·ªè h√†ng hi·ªán t·∫°i
        $cart = session()->get('cart', []);

        // N·∫øu gi·ªè h√†ng tr·ªëng ‚Üí quay l·∫°i
        if (empty($cart)) {
            return redirect()->route('cart.show')->with('error', 'Gi·ªè h√†ng tr·ªëng, vui l√≤ng th√™m s·∫£n ph·∫©m.');
        }

        // ‚úÖ T√≠nh t·ªïng ti·ªÅn v√† s·ªë l∆∞·ª£ng
        $total = 0;
        $totalQuantity = 0;

        foreach ($cart as $item) {
            $total += $item['price'] * $item['quantity'];
            $totalQuantity += $item['quantity'];
        }

        // ‚úÖ Tr·∫£ ra view v·ªõi to√†n b·ªô gi·ªè h√†ng
        return view('client.cart.checkout', compact('cart', 'total', 'totalQuantity'));
    }


    // üíæ L∆∞u ƒë∆°n h√†ng v√†o DB
    public function save(Request $request)
    {
        $cart = session()->get('cart', []);

        if (empty($cart)) {
            return redirect()->route('cartshow')->with('error', 'Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ ƒë·∫∑t h√†ng.');
        }

        // ‚úÖ T√≠nh t·ªïng ti·ªÅn
        $total = collect($cart)->reduce(fn($carry, $item) => $carry + ($item['price'] * $item['quantity']), 0);

        // ‚úÖ T·∫°o ƒë∆°n h√†ng
        $order = Order::create([
            'customerid'     => auth()->check() ? auth()->id() : 0,
            'fullname'       => $request->fullname,
            'tel'            => $request->tel,
            'address'        => $request->address,
            'description'    => $request->description ?? 'Kh√¥ng c√≥ ghi ch√∫',
            'payment_method' => $request->payment_method,
            'total'          => $total,
        ]);

        // ‚úÖ L∆∞u t·ª´ng s·∫£n ph·∫©m v√†o b·∫£ng order_items
        foreach ($cart as $item) {
            OrderItem::create([
                'orderid'  => $order->id,
                'productid' => $item['productid'],
                'quantity' => $item['quantity'],
                'price'    => $item['price'],
                'subtotal' => $item['price'] * $item['quantity'],
            ]);
        }

        // ‚úÖ Xo√° gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng
        session()->forget('cart');

        // ‚úÖ ƒêi·ªÅu h∆∞·ªõng theo ph∆∞∆°ng th·ª©c thanh to√°n
        return match ($request->payment_method) {
            'bank'  => redirect()->route('payment.bank', ['order_id' => $order->id]),
            'momo'  => redirect()->route('payment.momo', ['order_id' => $order->id]),
            'vnpay' => redirect()->route('payment.vnpay', ['order_id' => $order->id]),
            default => redirect()->route('order.success', ['order_id' => $order->id])
                ->with('success', 'ƒê·∫∑t h√†ng th√†nh c√¥ng, thanh to√°n khi nh·∫≠n h√†ng.'),
        };
    }

    // üí≥ Thanh to√°n qua ng√¢n h√†ng
    public function bank($order_id)
    {
        $order = Order::findOrFail($order_id);

        $bankData = [
            'bank_name'    => 'Vietcombank',
            'account_no'   => '0796573363',
            'account_name' => 'Nguy·ªÖn Tu·∫•n V≈©',
            'amount'       => $order->total,
            'qr_image'     => asset('storage/payments/qr-bank.png'),
        ];

        return view('client.payment.bank', compact('bankData', 'order_id', 'order'));
    }

    // üì± Thanh to√°n qua Momo
    public function momo($order_id)
    {
        $order = Order::with('items')->findOrFail($order_id);

        $momoData = [
            'phone'        => '0796573363',
            'wallet_name'  => 'Nguy·ªÖn Tu·∫•n V≈©',
            'amount'       => $order->total,
            'qr_image'     => asset('storage/payments/qr-momo.png'),
        ];

        return view('client.payment.momo', compact('momoData', 'order_id', 'order'));
    }

    // üí∞ Thanh to√°n qua VNPay
    public function vnpay($order_id)
    {
        return view('client.payment.vnpay', compact('order_id'));
    }

    // ‚úÖ Trang th√¥ng b√°o ƒë·∫∑t h√†ng th√†nh c√¥ng
    public function success($order_id)
    {
        return view('client.payment.success', compact('order_id'));
    }

    // üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªè h√†ng
    public function updateCart(Request $request)
    {
        // 1. Validate d·ªØ li·ªáu
        $request->validate([
            'productid' => 'required', // T√™n key ph·∫£i l√† 'productid'
            'quantity'  => 'required|integer|min:1',
        ]);

        $cart = session()->get('cart', []);
        $productId = $request->productid; // L·∫•y 'productid'
        $quantity = (int) $request->quantity;

        // 2. Ki·ªÉm tra v√† c·∫≠p nh·∫≠t Session
        if (isset($cart[$productId])) { // D√πng $productId l√†m key
            $cart[$productId]['quantity'] = $quantity;
            session()->put('cart', $cart); // L∆∞u l·∫°i session

            // 3. T√≠nh to√°n l·∫°i gi√° tr·ªã m·ªõi
            $subtotal = $cart[$productId]['price'] * $quantity;

            $total = 0;
            $totalQuantity = 0;
            foreach ($cart as $item) {
                $total += $item['price'] * $item['quantity'];
                $totalQuantity += $item['quantity'];
            }

            // 4. Tr·∫£ v·ªÅ JSON cho JavaScript
            return response()->json([
                'message'            => 'C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng!',
                'subtotal_formatted' => number_format($subtotal) . ' ‚Ç´',
                'total_formatted'    => number_format($total) . ' ‚Ç´',
                'totalQuantity'      => $totalQuantity,
            ]);
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y
        return response()->json(['error' => 'S·∫£n ph·∫©m kh√¥ng t√¨m th·∫•y.'], 404);
    }
}